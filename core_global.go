package html

import (
	"sort"
	"strconv"
	"strings"
)

// This file is generated by gen-tags; DO NOT EDIT.
// Global HTML attributes structure and option constructors.

type GlobalAttrs struct {
	// Generated from wooorm global attributes
	// Common core attributes
	Class           string
	Accesskey       string
	Autocapitalize  string
	Autocorrect     string
	Contenteditable string
	Dir             string
	Enterkeyhint    string
	Hidden          string
	Id              string
	Inputmode       string
	Is              string
	Itemid          string
	Itemprop        string
	Itemref         string
	Itemtype        string
	Lang            string
	Nonce           string
	Popover         string
	Role            string
	Slot            string
	Title           string

	// Style attribute as a single string
	Style string

	// Map attributes
	Aria   map[string]string // aria-*
	Data   map[string]string // data-*
	Events map[string]string // "onclick" -> "handler()"
	Custom map[string]string // custom attributes like hx-*, x-*, etc.

	// Pointers for tri-state values
	Tabindex           *int
	Draggable          *string
	Spellcheck         *string
	Translate          *string
	Writingsuggestions *string

	// Booleans
	Autofocus, Inert, Itemscope bool
}

// Helper methods for setting attributes
func (g *GlobalAttrs) addClass(v string) {
	if v == "" {
		return
	}

	if g.Class == "" {
		g.Class = v
	} else {
		g.Class += " " + v
	}
}

func (g *GlobalAttrs) setAria(k, v string) {
	if g.Aria == nil {
		g.Aria = map[string]string{}
	}

	g.Aria[k] = v
}

func (g *GlobalAttrs) setData(k, v string) {
	if g.Data == nil {
		g.Data = map[string]string{}
	}

	g.Data[k] = v
}

func (g *GlobalAttrs) setEvent(ev, handler string) {
	if g.Events == nil {
		g.Events = map[string]string{}
	}

	g.Events["on"+ev] = handler
}

func (g *GlobalAttrs) setCustom(k, v string) {
	if g.Custom == nil {
		g.Custom = map[string]string{}
	}

	g.Custom[k] = v
}

// Generated WriteGlobal function based on gostar global attributes
func WriteGlobal(sb *strings.Builder, g *GlobalAttrs) {
	if g.Class != "" {
		Attr(sb, "class", g.Class)
	}

	if g.Accesskey != "" {
		Attr(sb, "accesskey", g.Accesskey)
	}

	if g.Autocapitalize != "" {
		Attr(sb, "autocapitalize", g.Autocapitalize)
	}

	if g.Autocorrect != "" {
		Attr(sb, "autocorrect", g.Autocorrect)
	}

	if g.Autofocus {
		BoolAttr(sb, "autofocus")
	}

	if g.Class != "" {
		Attr(sb, "class", g.Class)
	}

	if g.Contenteditable != "" {
		Attr(sb, "contenteditable", g.Contenteditable)
	}

	if g.Dir != "" {
		Attr(sb, "dir", g.Dir)
	}

	if g.Draggable != nil {
		Attr(sb, "draggable", *g.Draggable)
	}

	if g.Enterkeyhint != "" {
		Attr(sb, "enterkeyhint", g.Enterkeyhint)
	}

	if g.Hidden != "" {
		Attr(sb, "hidden", g.Hidden)
	}

	if g.Id != "" {
		Attr(sb, "id", g.Id)
	}

	if g.Inert {
		BoolAttr(sb, "inert")
	}

	if g.Inputmode != "" {
		Attr(sb, "inputmode", g.Inputmode)
	}

	if g.Is != "" {
		Attr(sb, "is", g.Is)
	}

	if g.Itemid != "" {
		Attr(sb, "itemid", g.Itemid)
	}

	if g.Itemprop != "" {
		Attr(sb, "itemprop", g.Itemprop)
	}

	if g.Itemref != "" {
		Attr(sb, "itemref", g.Itemref)
	}

	if g.Itemscope {
		BoolAttr(sb, "itemscope")
	}

	if g.Itemtype != "" {
		Attr(sb, "itemtype", g.Itemtype)
	}

	if g.Lang != "" {
		Attr(sb, "lang", g.Lang)
	}

	if g.Nonce != "" {
		Attr(sb, "nonce", g.Nonce)
	}

	if g.Popover != "" {
		Attr(sb, "popover", g.Popover)
	}

	if g.Role != "" {
		Attr(sb, "role", g.Role)
	}

	if g.Slot != "" {
		Attr(sb, "slot", g.Slot)
	}

	if g.Spellcheck != nil {
		Attr(sb, "spellcheck", *g.Spellcheck)
	}

	if g.Style != "" {
		Attr(sb, "style", g.Style)
	}

	if g.Tabindex != nil {
		Attr(sb, "tabindex", strconv.Itoa(*g.Tabindex))
	}

	if g.Title != "" {
		Attr(sb, "title", g.Title)
	}

	if g.Translate != nil {
		Attr(sb, "translate", *g.Translate)
	}

	if g.Writingsuggestions != nil {
		Attr(sb, "writingsuggestions", *g.Writingsuggestions)
	}
	// Aria attributes
	for _, k := range sortedKeys(g.Aria) {
		Attr(sb, "aria-"+k, g.Aria[k])
	}

	// Data attributes
	for _, k := range sortedKeys(g.Data) {
		Attr(sb, "data-"+k, g.Data[k])
	}

	// Event handlers
	for _, evAttr := range sortedKeys(g.Events) {
		handler := g.Events[evAttr]
		if handler != "" {
			Attr(sb, evAttr, handler)
		}
	}

	// Custom attributes
	for _, k := range sortedKeys(g.Custom) {
		if v := g.Custom[k]; v != "" {
			Attr(sb, k, v)
		}
	}
}

func sortedKeys(m map[string]string) []string {
	if len(m) == 0 {
		return nil
	}

	keys := make([]string, 0, len(m))
	for k := range m {
		if k != "" {
			keys = append(keys, k)
		}
	}

	sort.Strings(keys)

	return keys
}

// Global option: one glue impl for all tags (methods are added in tag files)
type Global struct {
	f func(*GlobalAttrs)
}

// Do applies the global attribute function to GlobalAttrs (public for SVG package integration)
func (g Global) Do(ga *GlobalAttrs) {
	g.f(ga)
}

// Note: applySvg method will be added via build tags or separate file
// to avoid circular imports between html and svg packages

// Global attribute constructors
func AClass(v string) Global {
	return Global{func(g *GlobalAttrs) { g.addClass(v) }}
}

func AAccesskey(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Accesskey = v }}
}

func AAutocapitalize(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Autocapitalize = v }}
}

func AAutocorrect(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Autocorrect = v }}
}

func AAutofocus() Global {
	return Global{func(g *GlobalAttrs) { g.Autofocus = true }}
}

func AContenteditable(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Contenteditable = v }}
}

func ADir(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Dir = v }}
}

func ADraggable(b bool) Global {
	val := "false"
	if b {
		val = "true"
	}

	return Global{func(g *GlobalAttrs) { g.Draggable = &val }}
}

func AEnterkeyhint(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Enterkeyhint = v }}
}

func AHidden(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Hidden = v }}
}

func AId(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Id = v }}
}

func AInert() Global {
	return Global{func(g *GlobalAttrs) { g.Inert = true }}
}

func AInputmode(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Inputmode = v }}
}

func AIsAttr(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Is = v }}
}

func AItemid(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Itemid = v }}
}

func AItemprop(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Itemprop = v }}
}

func AItemref(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Itemref = v }}
}

func AItemscope() Global {
	return Global{func(g *GlobalAttrs) { g.Itemscope = true }}
}

func AItemtype(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Itemtype = v }}
}

func ALang(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Lang = v }}
}

func ANonce(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Nonce = v }}
}

func APopover(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Popover = v }}
}

func ARole(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Role = v }}
}

func ASlot(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Slot = v }}
}

func ASpellcheck(b bool) Global {
	val := "false"
	if b {
		val = "true"
	}

	return Global{func(g *GlobalAttrs) { g.Spellcheck = &val }}
}

func AStyle(style string) Global {
	return Global{func(g *GlobalAttrs) { g.Style = style }}
}

func ATabindex(i int) Global {
	return Global{func(g *GlobalAttrs) { g.Tabindex = &i }}
}

func ATitle(v string) Global {
	return Global{func(g *GlobalAttrs) { g.Title = v }}
}

func ATranslate(b bool) Global {
	val := "no"
	if b {
		val = "yes"
	}

	return Global{func(g *GlobalAttrs) { g.Translate = &val }}
}

func AWritingsuggestions(b bool) Global {
	val := "false"
	if b {
		val = "true"
	}

	return Global{func(g *GlobalAttrs) { g.Writingsuggestions = &val }}
}

// Map-like convenience functions
func AData(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setData(k, v) }}
}

func AAria(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setAria(k, v) }}
}

func AOn(ev, handler string) Global {
	return Global{func(g *GlobalAttrs) { g.setEvent(ev, handler) }}
}

func ACustom(k, v string) Global {
	return Global{func(g *GlobalAttrs) { g.setCustom(k, v) }}
}
